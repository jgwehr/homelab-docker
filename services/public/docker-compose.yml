name: "public"

services:

####################
# Reverse Proxy
####################

  caddy:
    container_name: caddy
    build:
      context: ./dockerfiles
      dockerfile: caddy.dockerfile #Custom build which uses duckdns. Control image version in this file

    networks:
      - caddy-net

    ports:
      - ${PORT_CADDY_HTTP}:80
      - ${PORT_CADDY_HTTPS}:443
      - ${PORT_CADDY_HTTPS}:443/udp
      - ${PORT_CADDY_ADMIN}:2019

    environment:
      LOG_FILE: ${LOGDIR}/caddy/access.log
      DOMAIN: ${DOMAIN}
      EMAIL: ${EMAIL_ADMIN}
      DUCKDNS_API_TOKEN: ${DUCKDNS_TOKEN}
      
      BOUNCER_CADDY_TOKEN: ${BOUNCER_CADDY_TOKEN}

    labels:
      - diun.enable=true
      - homepage.group=Wild West
      - homepage.name=Caddy
      - homepage.icon=caddy
      - homepage.description=Reverse Proxy
      - homepage.widget.type=caddy
      - homepage.widget.url=http://${SERVER_URL}:${PORT_CADDY_ADMIN} # default admin port is 2019

    volumes:
      - ./staticconfig/caddy/Caddyfile:/etc/caddy/Caddyfile:ro # Required. Needs to be an extension-less file NOT a directory
      - ${CONFIGDIR}/caddy/data:/data # Optional, house for certs. Caddy adds its own /caddy/ directory
      - ${CONFIGDIR}/caddy/config:/config # Optional, JSON Config files. Caddy adds its own /caddy/ directory
      - ${STATICDIR}/tandoor_media:/www/tandoor:ro # recipe image files for Tandoor

    healthcheck:
      test: ["CMD", "caddy", "version"]
    restart: unless-stopped


####################
# Dynamic DNS
####################  
  
  duckdns:
    container_name: duckdns
    image: ghcr.io/linuxserver/duckdns

    networks:
      - caddy-net

    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
      SUBDOMAINS: ${DUCKDNS_SUBDOMAINLIST}
      TOKEN: ${DUCKDNS_TOKEN}

    labels:
      - diun.enable=true
      - homepage.group=Wild West
      - homepage.name=DuckDNS
      - homepage.icon=duckdns
      - homepage.description=Dynamic DNS for external access
    volumes:
      - ${CONFIGDIR}/duckdns:/config #optional

    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 32M
    restart: unless-stopped


networks:
  caddy-net:
    name: caddy-net
    external: true
