version: "3.7"

services:
#  bitwarden:
#    container_name: bitwarden
#    image: vaultwarden/server
#    restart: unless-stopped
#    user: ${PUID}:1000
#    ports:
#      - ${PORT_BITWARDEN_HTTP}:80
#      - ${PORT_BITWARDEN_HTTPS}:443
#    depends_on:
#      - 'caddy'
#    volumes:
#      - ${CONFIGDIR}/bitwarden:/data
#      - ${LOGDIR}/bitwarden:/var/log/vaultwarden
#    environment:
#      TZ: ${TZ}
#      # LOG_FILE: ${LOGDIR}/bitwarden.log
#      LOG_LEVEL: ${LOG_LEVEL:-warn}
#      EXTENDED-LOGGING: 'true'
#      WEBSOCKET_ENABLED: 'true' # Required to use websockets
#      SIGNUPS_ALLOWED: 'false'   # set to false to disable signups
#      INVITATIONS_ALLOWED: 'false'
#      SHOW_PASSWORD_HINT: 'false' # set to false to improve security (slightly)
#    
#    logging:
#      driver: "json-file"
#      options:
#        max-size: "5m"
#        max-file: "10"

#  crowdsec:
#    container_name: crowdsec
#    image: crowdsecurity/crowdsec:v1.2.0
#    restart: always
#    ports:
#      - ${PORT_CROWDSEC_REST}:8080 # exposes a REST API for bouncers, cscli and communication between crowdsec agent and local api
#      - ${PORT_CROWDSEC_METRICS}:6060 #exposes prometheus metrics on /metrics and pprof debugging metrics on /debug
#    environment:
#      TZ: ${TZ}
#      GID: ${PGID}
#      COLLECTIONS: "crowdsecurity/caddy crowdsecurity/caddy-logs"
#
#    volumes:
#      - ${STATICONFIGDIR}/crowdsec/config.yaml:/etc/crowdsec/config.yaml
#      - ${STATICONFIGDIR}/crowdsec/acquis.yaml:/etc/crowdsec/acquis.yaml
#
#      - ${CONFIGDIR}/crowdsec/db:/var/lib/crowdsec/data/
#      - crowdsec-config:/etc/crowdsec/
#    #  - ${CONFIGDIR}/crowdsec:/etc/crowdsec/ # This is my preferred way to get things working, but currently doesn't work
#
#      - ${LOGDIR}/caddy:/var/log/caddy ## check https://hub.crowdsec.net/author/crowdsecurity/configurations/caddy-logs
#
#    healthcheck:
#      test: ["CMD","cscli metrics","cscli hub list"]
#    
#    networks:
#     crowdsec_test:
#       ipv4_address: 172.20.0.4
         
  caddy:
    container_name: caddy
    build:
      context: ${DOCKERDIR}
      dockerfile: caddy.dockerfile #Custom build which uses duckdns
    restart: unless-stopped
    ports:
        - ${PORT_CADDY_HTTP}:80
        - ${PORT_CADDY_HTTPS}:443
    networks:
        - web
    volumes:
      - ${STATICONFIGDIR}/caddy/Caddyfile:/etc/caddy/Caddyfile # Required. Needs to be an extension-less file NOT a directory
      - ${CONFIGDIR}:/data # Optional, house for certs. Caddy adds its own /caddy/ directory
      - ${CONFIGDIR}:/config # Optional, JSON Config files. Caddy adds its own /caddy/ directory
      - ${LOGDIR}/caddy:/var/log/caddy ## check for /access.log
    environment:
      LOG_FILE: ${LOGDIR}/caddy/access.log
      DOMAIN: ${DOMAIN}
      EMAIL: ${EMAIL_ADMIN}
      DUCKDNS_API_TOKEN: ${DUCKDNS_TOKEN}
    healthcheck:
      test: ["CMD", "caddy", "version"]
  
  duckdns:
    container_name: duckdns
    image: ghcr.io/linuxserver/duckdns
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
      SUBDOMAINS: ${DUCKDNS_SUBDOMAINLIST}
      TOKEN: ${DUCKDNS_TOKEN}
      LOG_FILE: ${LOGDIR}/duckdns.log #optional
    volumes:
      - ${CONFIGDIR}/duckdns:/config #optional
    restart: unless-stopped
  
  jellyfin2:
    container_name: jellyfin2
    image: jellyfin/jellyfin
    user: ${PUID}:${PGID}
    network_mode: "host"
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
      JELLYFIN_PublishedServerUrl: ${JELLYFIN_URL} #optional
    volumes:
      - ${CONFIGDIR}/jellyfin_compose:/config
      - ${CACHEDIR}/jellyfin_compose:/cache
      - ${MEDIADIR}:/media:ro
    ports:
      - ${PORT_HTPC_HTTP}:8096 #HTTP webUI
      - ${PORT_HTPC_HTTPS}:8920 #HTTPS webUI
      - ${PORT_HTPC_LOCAL}:7359/udp #optional. Allows clients to discover Jellyfin on the local network.
      - ${PORT_HTPC_DLNA}:1900/udp #optional. Service discovery used by DNLA and clients.
    restart: unless-stopped

  heimdall:
    image: ghcr.io/linuxserver/heimdall
    container_name: heimdall
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
    volumes:
      - ${CONFIGDIR}/heimdall:/config
    ports:
      - ${PORT_DASH_HTTP}:80
      - ${PORT_DASH_HTTPS}:443
    restart: unless-stopped

#  portainer:
#    container_name: portainer
#    image: portainer/portainer-ce
#    restart: always
#    command: -H unix:///var/run/docker.sock
#    ports:
#      - ${PORT_PORTAINER_AGENT}:8000
#      - ${PORT_PORTAINER_UI}:9000
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - ${CONFIGDIR}/portainer/data:/data
#      - ${CONFIGDIR}/shared:/shared
#    environment:
#      TZ: ${TZ}

  uptime-kuma:
    container_name: uptime_kuma
    image: louislam/uptime-kuma
    restart: always
    ports:
      - ${PORT_UPKUMA}:3001
    volumes:
      - ${CONFIGDIR}/uptime-kuma:/app/data
      
volumes:
  crowdsec-config:

networks:
  web:
    external: true
  crowdsec_test:
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24