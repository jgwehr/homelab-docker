{ # Global options block. Entirely optional, https is on by default
  email {$EMAIL} # Optional email key for lets encrypt
  #debug # this is optional; makes Caddy log more details
  
  order crowdsec first # this ensures that the CrowdSec module is executed before any other HTTP handlers
  crowdsec {
    api_url http://crowdsec:8080/ # the URL where your CrowdSec LAPI can be reached. Caddy connects directly, so use the default port 8080
    api_key {$BOUNCER_CADDY_TOKEN} # the secret API key for the bouncer to authenticate against LAPI
  }  
    
}

############
# Snippets #
############
(headers) {
	header {
        -server #anonymizes Caddy

        # disable FLoC tracking
        Permissions-Policy interest-cohort=()

        #enable HSTS
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

        Content-Security-Policy "upgrade-insecure-requests"
        header Location http:// https://

        X-Content-Type-Options "nosniff" # disable clients from sniffing the media type
        X-XSS-Protection "1; mode=block"
        Referrer-Policy "strict-origin-when-cross-origin; no-referrer-when-downgrade"

        # clickjacking protection
        ?X-Frame-Options DENY

        header_up X-Real-IP {vars.realip}
	}
}

(main) {
  crowdsec

  respond /robots.txt 200 {
    body "User-agent: *
    Disallow: /
    
    User-agent: AdsBot-Google
    Disallow: /

    User-agent: AdsBot-Google-Mobile
    Disallow: /"

    close
  }

  encode zstd gzip

  log {
    level ERROR
    output file {$LOG_FILE} {
      roll_size 3MiB
      roll_keep 5
      roll_keep_for 48h
    }
    format json
  }
}


# import *.caddy ## try this while storing individual sites in *.caddy files

localhost {
  import main

  respond "Hello, world!"
}

{$DOMAIN} {
  import headers
  import main

  # SSL Cert via Duckdns build
  tls {
    dns duckdns {$DUCKDNS_API_TOKEN}
  }

  # System Status page
  reverse_proxy uptime-kuma:3001
}

www.{$DOMAIN} {
  redir {$DOMAIN}{uri}
}

ghs.{$DOMAIN} {
  import headers
  import main

  reverse_proxy gloomhaven:80
}

ghs-server.{$DOMAIN} {
  import headers
  import main

  reverse_proxy gloomhaven-server:8080

  @websockets {
    header Connection *Upgrade*
    header Upgrade websocket
    header_down Access-Control-Allow-Origin *
    transparent
  }
  reverse_proxy @websockets gloomhaven-server:8080
}

jelly.{$DOMAIN} {
  import headers
  import main

  reverse_proxy jellyfin:8096
}

recipe.{$DOMAIN} {
  import headers
  import main

  handle_path /media/* {
			root * /www/tandoor
			file_server
		}

  reverse_proxy tandoor:8080
}

request.{$DOMAIN} {
  import headers
  import main

  reverse_proxy jellyseerr:5055
}

status.{$DOMAIN} {
  import headers
  import main

  reverse_proxy uptime-kuma:3001
}
